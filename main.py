import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramNetworkError

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7619827644:AAG7b9njo-8LqqzsqQX1n0t-Af4J5CROyAg"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
bot = Bot(token=BOT_TOKEN, timeout=30)
dp = Dispatcher()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö —Å Row factory
def get_products_db():
    conn = sqlite3.connect('products.db')
    conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º –ø–æ –∏–º–µ–Ω–∏
    return conn


def get_clients_db():
    conn = sqlite3.connect('clients.db')
    conn.row_factory = sqlite3.Row
    return conn


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üõç –¢–æ–≤–∞—Ä—ã", callback_data="products"),
        InlineKeyboardButton(text="üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="clients")
    )
    builder.row(
        InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")
    )
    return builder.as_markup()


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º!",
        reply_markup=main_menu()
    )


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ê–ó–î–ï–õ–û–í ==========

@dp.callback_query(F.data == "products")
async def show_products(callback: types.CallbackQuery):
    conn = get_products_db()
    try:
        products = conn.execute("SELECT name, price FROM products LIMIT 5").fetchall()

        if not products:
            await callback.message.edit_text("–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ!", reply_markup=main_menu())
            return

        text = "üõç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n" + "\n".join(
            f"{p['name']} - {p['price']}‚ÇΩ" for p in products
        )
        count = conn.execute("SELECT COUNT(*) FROM products").fetchone()[0]
        text += f"\n\n–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {count}"

        await callback.message.edit_text(text, reply_markup=main_menu())
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=main_menu())
    finally:
        conn.close()
    await callback.answer()


@dp.callback_query(F.data == "clients")
async def show_clients(callback: types.CallbackQuery):
    conn = get_clients_db()
    try:
        clients = conn.execute("SELECT full_name, phone FROM clients LIMIT 5").fetchall()

        if not clients:
            await callback.message.edit_text("–ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ!", reply_markup=main_menu())
            return

        text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã:\n\n" + "\n".join(
            f"{c['full_name']} - {c['phone']}" for c in clients
        )
        count = conn.execute("SELECT COUNT(*) FROM clients").fetchone()[0]
        text += f"\n\n–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {count}"

        await callback.message.edit_text(text, reply_markup=main_menu())
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=main_menu())
    finally:
        conn.close()
    await callback.answer()


@dp.callback_query(F.data == "about")
async def show_about(callback: types.CallbackQuery):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º\n\n"
        "–§—É–Ω–∫—Ü–∏–∏:\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤\n"
        "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n"
        "- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂\n\n"
        "–í–µ—Ä—Å–∏—è: 1.0"
    )
    await callback.message.edit_text(text, reply_markup=main_menu())
    await callback.answer()


@dp.callback_query(F.data == "add_product")
async def add_product_start(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
    await callback.answer()


# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
async def main():
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except TelegramNetworkError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        exit(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    try:
        with get_products_db() as conn:
            conn.execute("SELECT 1 FROM products LIMIT 1")
        print("‚úÖ –ë–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

        with get_clients_db() as conn:
            conn.execute("SELECT 1 FROM clients LIMIT 1")
        print("‚úÖ –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        exit(1)

    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")