import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7619827644:AAG7b9njo-8LqqzsqQX1n0t-Af4J5CROyAg"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
def get_products_db():
    conn = sqlite3.connect('products.db')
    return conn


def get_clients_db():
    conn = sqlite3.connect('clients.db')
    return conn


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üõç –¢–æ–≤–∞—Ä—ã", callback_data="products"),
        types.InlineKeyboardButton(text="üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="clients"),
        types.InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")
    )
    builder.adjust(2)
    return builder.as_markup()


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu()
    )


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ê–ó–î–ï–õ–û–í ==========

# –†–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query(F.data == "products")
async def show_products(callback: types.CallbackQuery):
    conn = get_products_db()
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT name, price FROM products LIMIT 5")
        products = cursor.fetchall()

        if not products:
            await callback.message.edit_text("–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ!")
            return

        text = "üõç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
        text += "\n".join([f"{name} - {price}‚ÇΩ" for name, price in products])
        text += "\n\n–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: " + str(len(products))

        await callback.message.edit_text(
            text,
            reply_markup=main_menu()
        )
    finally:
        conn.close()

    await callback.answer()


# –†–∞–∑–¥–µ–ª –∫–ª–∏–µ–Ω—Ç–æ–≤
@dp.callback_query(F.data == "clients")
async def show_clients(callback: types.CallbackQuery):
    conn = get_clients_db()
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT full_name, phone FROM clients LIMIT 5")
        clients = cursor.fetchall()

        if not clients:
            await callback.message.edit_text("–ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ!")
            return

        text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã:\n\n"
        text += "\n".join([f"{name} - {phone}" for name, phone in clients])
        text += "\n\n–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: " + str(len(clients))

        await callback.message.edit_text(
            text,
            reply_markup=main_menu()
        )
    finally:
        conn.close()

    await callback.answer()


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
@dp.callback_query(F.data == "about")
async def show_about(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º\n\n"
        "–§—É–Ω–∫—Ü–∏–∏:\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤\n"
        "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n"
        "- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂",
        reply_markup=main_menu()
    )
    await callback.answer()


# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
async def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        with get_products_db() as conn:
            conn.execute("SELECT 1 FROM products LIMIT 1")
        with get_clients_db() as conn:
            conn.execute("SELECT 1 FROM clients LIMIT 1")
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        exit(1)

    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
