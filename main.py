import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramNetworkError

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7619827644:AAG7b9njo-8LqqzsqQX1n0t-Af4J5CROyAg"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
bot = Bot(token=BOT_TOKEN, timeout=30)
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ITEMS_PER_PAGE = 5


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö —Å Row factory
def get_products_db():
    conn = sqlite3.connect('products.db')
    conn.row_factory = sqlite3.Row
    return conn


def get_clients_db():
    conn = sqlite3.connect('clients.db')
    conn.row_factory = sqlite3.Row
    return conn


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üõç –¢–æ–≤–∞—Ä—ã", callback_data="products"),
        InlineKeyboardButton(text="üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="clients")
    )
    builder.row(
        InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")
    )
    return builder.as_markup()


# ========== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –¢–û–í–ê–†–û–í ==========

@dp.message(Command("products"))
async def cmd_products(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    await show_products_page(message, page=0)


@dp.message(Command("categories"))
async def cmd_categories(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    conn = get_products_db()
    try:
        categories = conn.execute(
            "SELECT DISTINCT category FROM products"
        ).fetchall()

        if not categories:
            await message.answer("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.add(InlineKeyboardButton(
                text=category['category'],
                callback_data=f"category_{category['category']}"
            ))
        builder.adjust(2)

        await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )
    finally:
        conn.close()


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–û–í–ê–†–û–í ==========

async def show_products_page(message: types.Message, page: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
    conn = get_products_db()
    try:
        offset = page * ITEMS_PER_PAGE
        cursor = conn.cursor()

        cursor.execute(
            "SELECT id, name, price FROM products LIMIT ? OFFSET ?",
            (ITEMS_PER_PAGE, offset)
        )
        products = cursor.fetchall()

        total = conn.execute("SELECT COUNT(*) FROM products").fetchone()[0]

        if not products:
            await message.answer("üõí –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        text = f"üì¶ –¢–æ–≤–∞—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{(total // ITEMS_PER_PAGE) + 1}):\n\n"
        for product in products:
            text += f"{product['id']}. {product['name']} - {product['price']}‚ÇΩ\n"

        builder = InlineKeyboardBuilder()

        if page > 0:
            builder.add(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"products_page_{page - 1}"
            ))

        if (page + 1) * ITEMS_PER_PAGE < total:
            builder.add(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"products_page_{page + 1}"
            ))

        await message.answer(text, reply_markup=builder.as_markup())

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()


@dp.callback_query(F.data.startswith("products_page_"))
async def change_products_page(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–æ–≤–∞—Ä–æ–≤"""
    page = int(callback.data.split("_")[-1])
    await callback.message.delete()
    await show_products_page(callback.message, page)
    await callback.answer()


@dp.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split("_", 1)[1]
    conn = get_products_db()
    try:
        products = conn.execute(
            "SELECT name, price FROM products WHERE category = ?",
            (category,)
        ).fetchall()

        if not products:
            await callback.message.edit_text(f"üõí –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
            return

        text = f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n\n"
        text += "\n".join([f"{p['name']} - {p['price']}‚ÇΩ" for p in products])

        await callback.message.edit_text(text, reply_markup=main_menu())
    finally:
        conn.close()
    await callback.answer()


# ========== –°–¢–ê–†–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–æ—Å—Ç–∞–≤—å—Ç–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ==========

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º!",
        reply_markup=main_menu()
    )


@dp.callback_query(F.data == "products")
async def show_products(callback: types.CallbackQuery):
    try:
        with get_products_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name, price, category FROM products LIMIT 5")
            products = cursor.fetchall()

            if not products:
                await callback.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
                return

            response = "üõç –¢–æ–≤–∞—Ä—ã:\n\n" + "\n".join(
                f"{p['name']} - {p['price']}‚ÇΩ ({p['category']})"
                for p in products
            )

            count = conn.execute("SELECT COUNT(*) FROM products").fetchone()[0]
            response += f"\n\n–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {count}"

            await callback.message.edit_text(response, reply_markup=main_menu())

    except sqlite3.Error as e:
        await callback.answer(f"‚õî –û—à–∏–±–∫–∞ –ë–î: {e}", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", show_alert=True)

    await callback.answer()


@dp.callback_query(F.data == "clients")
async def show_clients(callback: types.CallbackQuery):
    conn = get_clients_db()
    try:
        clients = conn.execute("SELECT full_name, phone FROM clients LIMIT 5").fetchall()

        if not clients:
            await callback.message.edit_text("–ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ!", reply_markup=main_menu())
            return

        text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã:\n\n" + "\n".join(
            f"{c['full_name']} - {c['phone']}" for c in clients
        )
        count = conn.execute("SELECT COUNT(*) FROM clients").fetchone()[0]
        text += f"\n\n–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {count}"

        await callback.message.edit_text(text, reply_markup=main_menu())
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=main_menu())
    finally:
        conn.close()
    await callback.answer()


@dp.callback_query(F.data == "about")
async def show_about(callback: types.CallbackQuery):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º\n\n"
        "–§—É–Ω–∫—Ü–∏–∏:\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ (/products)\n"
        "- –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (/categories)\n"
        "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n"
        "- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        "–í–µ—Ä—Å–∏—è: 1.1"
    )
    await callback.message.edit_text(text, reply_markup=main_menu())
    await callback.answer()


@dp.callback_query(F.data == "add_product")
async def add_product_start(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
    await callback.answer()


# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
async def main():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except TelegramNetworkError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        exit(1)

    try:
        with get_products_db() as conn:
            conn.execute("SELECT 1 FROM products LIMIT 1")
        print("‚úÖ –ë–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

        with get_clients_db() as conn:
            conn.execute("SELECT 1 FROM clients LIMIT 1")
        print("‚úÖ –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        exit(1)

    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")